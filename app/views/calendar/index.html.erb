<% stylesheet 'calendar' %>
<% title 'Calendar' %>

<%= link_to_remote 'Create new event', {
      :url => new_event_path,
      :method => :get,
      :update => 'event_form',
      :complete => "$$('.panel.form .header')[0].update('New Event')"
    }, :class => 'button' %>
<%= link_to 'Upload files', new_upload_path, :class => 'lbOn button' %>
<br/><br/>

<div id="flash_notice" <%= 'style="display:none;"' if flash[:notice].blank? %> onclick="this.hide();"><%= flash[:notice] %></div>
<div id="flash_error" <%= 'style="display:none;"' if flash[:error].blank? %> onclick="this.hide();"><%= flash[:error] %></div>
<div class="panel calendar">
  <div class="header">
    Calendar
  </div>
  <div class="content">
    <%= render :partial => 'day', :collection => @days %>
  </div>
</div>

<div class="panel form">
  <div class="header">
    New Event
  </div>
  <div class="content" id="event_form">
    <%= render :partial => "events/form" %>
  </div>
</div>

<div class="panel files">
  <div class="header">
    Files
  </div>
  <div class="content" id="uploads">
    <%= render @uploads %>
  </div>
</div>

<script>
  $previousDayLoading = false;
  $nextDayLoading = false;
  Element.addMethods({
    scrollTo: function(element, left, top){
      var element = $(element);
      if (arguments.length == 1){
        var pos = element.cumulativeOffset();
        window.scrollTo(pos[0], pos[1]);
      } else {
        element.scrollLeft = left;
        element.scrollTop  = top;
      }
      return element;
    }
  });

  var editEvent = function(id){
    new Ajax.Updater('event_form', '/events/'+id+'/edit', {
      asynchronous:true,
      evalScripts:true,
      method:'get',
      onComplete:function(request){$$('.panel.form .header')[0].update('Edit Event')}
    });
  };

  var showDay = function(date, complete){
    var day = $(date);
    if (day) {
      var content = $$('.panel.calendar .content')[0];
      content.scrollTo(0, day.cumulativeOffset().top - content.cumulativeOffset().top);
      if (typeof(complete) == 'function') {complete()};
    }else{
      loadDay(date, function(){
        showDay(date);
        if (typeof(complete) == 'function') {complete()};
      });
    };
  };
  
  
  var loadDay = function(date, complete){
    new Ajax.Request('/calendar/day/'+date, {
      asynchronous:true,
      evalScripts:false,
      method:'get',
      onComplete:function(request){
        var day = $(date);
        if (day) {
          day.replace(request.responseText);
        }else{
          next = $(nextDate(date));
          if (next) {
            var scrollTop = $$('.panel.calendar .content')[0].scrollTop;
            next.insert({before: request.responseText});
            var height = $(date).getHeight();
            $$('.panel.calendar .content')[0].scrollTop = scrollTop + height;
          }else{
            previous = $(previousDate(date));
            if (previous) {
              previous.insert({after: request.responseText});
            }else{
              $$('.panel.calendar .content')[0].update(request.responseText);
              loadDay(previousDate(date));
              loadDay(nextDate(date));
            };
          };
        };
        if (typeof(complete) == 'function') {complete()};
      }
    });
  };
  
  var previousDate = function(date){
    newDate = new Date(Date.parse(date.gsub('-', '/')) - 86400000);
    var day = newDate.getDate();
    if (day < 10) {day = '0'+day};
    var month = newDate.getMonth()+1;
    if (month < 10) {month = '0'+month};
    var year = newDate.getFullYear();
    return month+'-'+day+'-'+year;
  };

  var nextDate = function(date){
    newDate = new Date(Date.parse(date.gsub('-', '/')) + 86400000);
    var day = newDate.getDate();
    if (day < 10) {day = '0'+day};
    var month = newDate.getMonth()+1;
    if (month < 10) {month = '0'+month};
    var year = newDate.getFullYear();
    return month+'-'+day+'-'+year;
  };
  
  var showEvent = function(id, date){
    var evnt = $('event_'+id);
    if (evnt) {
      var content = $$('.panel.calendar .content')[0];
      content.scrollTo(0, evnt.cumulativeOffset().top - content.cumulativeOffset().top);
      new Effect.Highlight(evnt);
    }else{
      loadEvent(id, date, function(){
        showEvent(id, date);
      });
    };
  };
  
  var loadEvent = function(id, date, complete){
    var day = $(date);
    if (day) {
      new Ajax.Request('/events/'+id, {
        asynchronous:true,
        evalScripts:false,
        method:'get',
        onComplete:function(request){
          var evnt = $('event_'+id);
          if (evnt) {
            evnt.replace(request.responseText);
          }else{
            day.insert({bottom:request.responseText})
          };
          if (typeof(complete) == 'function') {complete()};
        }
      });
    }else{
      loadDay(date, complete);
    };
  };
  
  var insertEvent = function(id, html, date){
    var day = $(date);
    if (day) {
      day.insert({bottom: html});
      showEvent(id);
    }else{
      showEvent(id, date);
    };
  };
  
  var showNotice = function(notice){
    $('flash_notice').update(notice).show();
    new Effect.Highlight('flash_notice');
  };
  
  showDay('<%= Time.now.strftime("%m-%d-%Y") %>');
  
  $$('.content')[0].observe('scroll', function(){
    if ((this.scrollTop <= 100)&&(!$previousDayLoading)) {
      $previousDayLoading = true;
      loadDay(previousDate(this.down('.day').id), function(){$previousDayLoading = false});
    };
    if ((this.scrollHeight - this.offsetHeight - this.scrollTop <= 100)&&(!$nextDayLoading)) {
      $nextDayLoading = true;
      loadDay(nextDate(this.select('.day').last().id), function(){$nextDayLoading = false});
    };
  });
</script>